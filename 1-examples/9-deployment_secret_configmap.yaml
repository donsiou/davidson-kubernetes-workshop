apiVersion: apps/v1
kind: Deployment
metadata:
  # CHANGE ME : Your deployment name
  name: java-deployment
  labels:
    # CHANGE ME : Your app name
    app: java
spec:
  # CHANGE ME : Number of replicas of your app
  replicas: 2

  # This deployment will manage pods
  # that have label app: java
  selector:
    matchLabels:
      # CHANGE ME : Your app name ( Should match pod template label below )
      app: java

  # Template configuration for pods that it will create
  template:
    metadata:
      labels:
        # CHANGE ME : Your app name
        app: java
    spec:
      containers:
        # CHANGE ME : Your container name
      - name: dataplatform-java
        # CHANGE ME : Your app docker image URI (image:tag)
        image: 614303399241.dkr.ecr.eu-west-1.amazonaws.com/dataplatform/java:17

        # Check if my application is alive
        livenessProbe:
          httpGet:
            # CHANGE ME : Your app healthcheck endpoint
            path: /healthz
            # CHANGE ME : The Port where your app is running 
            port: 8080
            
        resources:
          # Max resources
          limits:
            cpu: 100m
            memory: 100Mi
          # Min resources
          requests:
            cpu: 100m
            memory: 100Mi
          
        securityContext:
          runAsUser: 1000
          runAsNonRoot: true
          allowPrivilegeEscalation: false
        
        ## Adding env vars to container ######
        env:
          # CHANGE ME : Your env var name
          - name: JAVA_VERSION
          # CHANGE ME : Your env var value
            value: "17"
        ### Mount Secret as ENV VAR ##########
          # CHANGE ME : The name of env var that will contain secret value
          - name: USERNAME 
            valueFrom:
              secretKeyRef:
                # CHANGE ME : The name of the Kubernetes secret
                name: secret-basic-auth
                # CHANGE ME : A specific key to mount from that secret      
                key: username
        # -----------------------------------
        ### Mount Configmap as ENV VAR ######
          # CHANGE ME : The name of env var that will contain configmap value
          - name: PLAYER_INITIAL_LIVES 
            valueFrom:
              configMapKeyRef:
                # CHANGE ME : The name of the Kubernetes Configmap
                name: game-demo
                # CHANGE ME : A specific key to mount from that Configmap            
                key: player_initial_lives 
        #####################################

      ### Mount Configmap as File ###########
        volumeMounts:
        - name: config
          # CHANGE ME: The folder path where the ConfigMap file will be mounted
          mountPath: "/config"
          readOnly: true
      volumes:
      - name: config
        configMap:
          # CHANGE ME: the name of the ConfigMap
          name: game-demo
          items:
          # CHANGE ME: The key to load from the configmap
          - key: "game.properties"
          # CHANGE ME: The resulting filename inside the mounted path above
            path: "game.properties"
      ######################################